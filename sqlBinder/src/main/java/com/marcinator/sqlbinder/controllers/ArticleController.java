package com.marcinator.sqlbinder.controllers;

import com.marcinator.sqlbinder.models.Article;
import com.marcinator.sqlbinder.repositories.ArticleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/article") // This means URL's start with /demo (after Application path)
public class ArticleController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ArticleRepository articleRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody Integer addNewUser(@RequestParam String Heading,
                                            @RequestParam String Content) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Article n = new Article();
        n.setHeading(Heading);
        n.setContent(Content);
        Article savedArticle = articleRepository.save(n);
        return savedArticle.getID();
    }
    @PostMapping(path = "/remove") // Map ONLY POST Requests
    public @ResponseBody Article addNewUser(@RequestParam Integer id) {
        Optional<Article> byId = articleRepository.findById(id);
        byId.ifPresent(articleRepository::delete);
        return byId.orElse(null);
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Article> getAllUsers() {
        // This returns a JSON or XML with the users
        return articleRepository.findAll();
    }
}